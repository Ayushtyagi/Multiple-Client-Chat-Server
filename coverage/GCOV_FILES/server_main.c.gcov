        -:    0:Source:../src/server_main.c
        -:    0:Graph:server_main.gcno
        -:    0:Data:server_main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***********************************************************************************
        -:    2: * FILE NAME	: server_main.c
        -:    3:
        -:    4: * DESCRIPTION 	: File contains the main function of the server program which serves
        -:    5:                 client connections.
        -:    6:
        -:    7:        DATE            NAME            REFERENCE               REASON
        -:    8:      23/Nov/14     TH6_GR_07                               	Project
        -:    9:
        -:   10: * Copyright 2014 , Aricent Technologies (Holdings) Ltd
        -:   11:***********************************************************************************/
        -:   12:
        -:   13:#include "server_header.h"
        -:   14:#include "logger.h"
        -:   15:
        -:   16:/***********************************************************************************
        -:   17: * FUNCTION NAME : main
        -:   18:
        -:   19: * DESCRIPTION 	 : Accepts client connections, authenticates clients, maintains the
        -:   20:                   repository, registry, log file and creates a server thread to handle
        -:   21:                   each client concurrently.
        -:   22:
        -:   23: * RETURNS  	 : integer(0 on success, 1 on failure)
        -:   24:
        -:   25: * Copyright 2014 , Aricent Technologies (Holdings) Ltd
        -:   26:***********************************************************************************/
        -:   27:
        -:   28:int main(int argc, char* argv[])
function main called 1 returned 0% blocks executed 21%
        1:   29:{
        1:   30:        struct sockaddr_in server, client;
        1:   31:        int sock_desc = 0, connfd = 0, c = 0, i = 0, yes = 1, ch = 0, ret = 0, flag = 0, verify = 0, count = 0;
        1:   32:        char buffer[MAX_DATA_LEN];
        1:   33:        char username[MAX_NAME_LEN];
        1:   34:        char password[MAX_PASSWORD_LEN];
        1:   35:        char* timestamp = NULL;
        1:   36:        char log_buffer[MAX_DATA_LEN];
        1:   37:        char key[MAX_KEY_LEN];
        1:   38:	FILE *rep = NULL, *reg = NULL;
        1:   39:        pthread_t thread;
        1:   40:        NODE arg;
        -:   41:
        -:   42:	//Logger 
        1:   43:	log_level = LOG_LEVEL;
        1:   44:        log_max = LOG_MAX;
        1:   45:        strcpy(log_file,"log.txt");
        1:   46:        strcpy(error_log_file,"error_log.txt");
        -:   47:
        -:   48:        //Initializing the log file pointer
        1:   49:        fp = NULL;
        -:   50:
        -:   51:        //Initializing structure for signal handling
        1:   52:        struct sigaction sa;
        1:   53:        sa.sa_handler = &handle_signal;
        1:   54:        sa.sa_flags = SA_RESTART;
        1:   55:        sigfillset(&sa.sa_mask);
        -:   56:
        -:   57:        //Initializing each group
        6:   58:        for(i =0;i < MAX_GROUPS;i++)
        -:   59:        {
        5:   60:                group[i] = NULL;
        -:   61:        }
        -:   62:
        1:   63:        printf("\n-----------------------------------Server started------------------------------------\n\n");
        1:   64:        sock_desc = socket(AF_INET, SOCK_STREAM, 0);
        1:   65:        if(sock_desc < 0)
        -:   66:        {
    #####:   67:		ERROR_LOGGER(LOG_CRITICAL,"Couldn't create socket");
    #####:   68:                perror("Couldn't create socket");
    #####:   69:                return(EXIT_FAILURE);
        -:   70:        }
        1:   71:        printf("Socket created\n\n");
        1:   72:	LOGGER(LOG_CRITICAL, "Socket created");
        -:   73:
        1:   74:        if(setsockopt(sock_desc, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) < 0)
        -:   75:        {
    #####:   76:		ERROR_LOGGER(LOG_CRITICAL,"Error in choosing port\n");
    #####:   77:                perror("Setsockopt error");
    #####:   78:                exit(EXIT_FAILURE);
        -:   79:        }
        -:   80:
        1:   81:        memset(&server, 0, sizeof(server));
        1:   82:        memset(&client, 0, sizeof(client));
        -:   83:
        1:   84:        server.sin_family = AF_INET;
        1:   85:        server.sin_addr.s_addr = htonl(INADDR_ANY);
        1:   86:        server.sin_port = htons(PORT);
        -:   87:
        1:   88:        if(bind(sock_desc, (struct sockaddr*)&server, sizeof(server)) < 0)
        -:   89:        {
    #####:   90:		ERROR_LOGGER(LOG_CRITICAL,"Bind failure");
    #####:   91:                perror("Bind failure");
    #####:   92:                return EXIT_FAILURE;
        -:   93:        }
        1:   94:        printf("Bind success\n\n");
        1:   95:	LOGGER(LOG_CRITICAL,"Bind success");
        -:   96:
        1:   97:        if(listen(sock_desc, BACKLOG) < 0)
        -:   98:        {
    #####:   99:		ERROR_LOGGER(LOG_CRITICAL, "Listen failure");
    #####:  100:                perror("Listen failure");
    #####:  101:                return EXIT_FAILURE;
        -:  102:        }
        -:  103:
        1:  104:        c = sizeof(struct sockaddr_in);
        1:  105:        printf("Server waiting for connections...\n\n");
        1:  106:	LOGGER(LOG_CRITICAL, "Server waiting for connections");
        -:  107:
        1:  108:        if(-1 == sigaction(SIGINT, &sa, NULL))
        -:  109:        {
    #####:  110:	        ERROR_LOGGER(LOG_CRITICAL, "SIGNAL handling failed for SIGINT");
    #####:  111:                perror("Error");
    #####:  112:                return EXIT_FAILURE;
        -:  113:        }
        1:  114:        if(-1 == sigaction(SIGTSTP, &sa, NULL))
        -:  115:        {
    #####:  116:	        ERROR_LOGGER(LOG_CRITICAL,"SIGNAL handling failed for SIGTSTP");
    #####:  117:                perror("Error");
    #####:  118:                return EXIT_FAILURE;
        -:  119:        }
        1:  120:	while(1)
        -:  121:        {
        1:  122:start:          connfd = accept(sock_desc, (struct sockaddr*)&client, (socklen_t*)&c);
    #####:  123:                if(0 > connfd)
        -:  124:                {
    #####:  125:			ERROR_LOGGER(LOG_CRITICAL, "Accept Failure");
    #####:  126:                        perror("Accept failure");
    #####:  127:                        return EXIT_FAILURE;
        -:  128:                }
    #####:  129:		LOGGER(LOG_CRITICAL, "Connection accepted");
    #####:  130:                timestamp = get_timestamp();
    #####:  131:                timestamp[strlen(timestamp) - 1] = '\0';
        -:  132:
        -:  133:                //Receiving username from client
    #####:  134:                ret = read(connfd, username, MAX_NAME_LEN);
    #####:  135:                if(-1 == ret)
        -:  136:                {
    #####:  137:			ERROR_LOGGER(LOG_CRITICAL, "Read error");
    #####:  138:                        perror("Read error");
    #####:  139:                        return EXIT_FAILURE;
        -:  140:                }
    #####:  141:                username[ret] = '\0';
    #####:  142:		LOGGER(LOG_CRITICAL,"Read username");
        -:  143:
        -:  144:                //Search in repository
    #####:  145:                flag = authenticate_client(rep, username);
        -:  146:
    #####:  147:                if(NEW_USER == flag)
        -:  148:                {
    #####:  149:                        insert_into_repository(rep, username);
        -:  150:                }
        -:  151:
        -:  152:                //Send flag to client
    #####:  153:                send_flag(connfd, flag);
        -:  154:
        -:  155:                //Now receive the password
    #####:  156:        jmp:    ret = read(connfd, password, MAX_PASSWORD_LEN);
    #####:  157:                if(-1 == ret)
        -:  158:                {
    #####:  159:			ERROR_LOGGER(LOG_CRITICAL, "Read error");
    #####:  160:                        perror("Read error");
    #####:  161:                        return EXIT_FAILURE;
        -:  162:                }
    #####:  163:                password[ret] = '\0';
    #####:  164:		LOGGER(LOG_CRITICAL, "Read password");
        -:  165:
        -:  166:                //Concatenate username and password into a key
    #####:  167:                sprintf(key, "%s%s", username, password);
        -:  168:
    #####:  169:                if(NEW_USER == flag)
        -:  170:                {
        -:  171:                        //Writing to registry
    #####:  172:                        insert_into_registry(reg, key);
        -:  173:                }
        -:  174:
    #####:  175:                if(REGISTERED_USER == flag)
        -:  176:                {
        -:  177:			//Verify password from the registry
    #####:  178:                        verify = verify_password(reg, key);
    #####:  179:                        send_flag(connfd, verify);
        -:  180:
    #####:  181:                        if(INCORRECT_PASSWORD == verify)
        -:  182:                        {
    #####:  183:                                receive_flag(connfd, &count);
    #####:  184:                                if(MAX_LOGIN_ATTEMPTS == count)
        -:  185:                                {
    #####:  186:                                        printf("%s failed to login, disconnecting from server.\n\n", username);
    #####:  187:					LOGGER(LOG_CRITICAL,"Maximum login attempts exceeded, disconnecting from server");
    #####:  188:                                        close(connfd);
    #####:  189:                                        goto start;
        -:  190:                                }
    #####:  191:                                else goto jmp;
        -:  192:                        }
        -:  193:                }
        -:  194:
    #####:  195:                printf("%s with IP address %s connected to server\n\n", username, inet_ntoa(client.sin_addr));
        -:  196:
    #####:  197:                sprintf(log_buffer, "%s : %s connected to server with IP address %s\n\n", timestamp, username, inet_ntoa(client.sin_addr));
        -:  198:
        -:  199:                //Writing to log file
    #####:  200:                insert_into_logfile(fp, log_buffer);
        -:  201:
    #####:  202:                bzero(log_buffer, MAX_DATA_LEN);
    #####:  203:                free(timestamp);
        -:  204:
        -:  205:                //Receiving client's group choice
    #####:  206:        group:  receive_group_number(connfd, &ch);
        -:  207:
        -:  208:                //Send list of online clients
    #####:  209:                send_client_list(group[ch - 1], connfd);
        -:  210:
        -:  211:                //Confirm group choice
    #####:  212:                receive_flag(connfd, &flag);
    #####:  213:                if(NOT_CONFIRMED == flag)
    #####:  214:                        goto group;
    #####:  215:                else if(CONFIRMED == flag)
        -:  216:                {
    #####:  217:                        printf("%d -> %s joined group %d\n\n", connfd, username, ch);
        -:  218:                }
        -:  219:                else
        -:  220:                {
    #####:  221:                        timestamp = get_timestamp();
    #####:  222:                        timestamp[strlen(timestamp) - 1] = '\0';
    #####:  223:                        printf("%s chose to quit, disconnecting from server.\n\n", username);
    #####:  224:                        sprintf(log_buffer, "%s : %s chose to quit, disconnecting from server.\n\n", timestamp, username);
        -:  225:
        -:  226:                        //Writing to log file
    #####:  227:                        insert_into_logfile(fp, log_buffer);
    #####:  228:			LOGGER(LOG_CRITICAL, log_buffer);
        -:  229:                        
    #####:  230:			free(timestamp);
    #####:  231:			bzero(log_buffer, MAX_DATA_LEN);
    #####:  232:                        close(connfd);
        -:  233:			
    #####:  234:                        goto start;
        -:  235:                }
    #####:  236:                timestamp = get_timestamp();
    #####:  237:                timestamp[strlen(timestamp) - 1] = '\0';
    #####:  238:                sprintf(log_buffer, "%s : %d -> %s joined group %d\n\n", timestamp, connfd, username, ch);
        -:  239:
        -:  240:                //Writing to log file
    #####:  241:                insert_into_logfile(fp, log_buffer);
    #####:  242:		LOGGER(LOG_CRITICAL, log_buffer);		
        -:  243:
    #####:  244:                free(timestamp);
    #####:  245:                bzero(log_buffer, MAX_DATA_LEN);
        -:  246:
        -:  247:                //Inserting client into chosen group
    #####:  248:                group[ch - 1] = insert(group[ch - 1], connfd, username);
        -:  249:
    #####:  250:                printf("Online clients in group %d :\n", ch);
    #####:  251:                display(group[ch - 1]);
    #####:  252:                printf("\n");
        -:  253:
    #####:  254:                sprintf(buffer, "%s is online\n", username);
    #####:  255:                notify_clients(group[ch - 1], connfd, buffer);
    #####:  256:                bzero(buffer, MAX_DATA_LEN);
        -:  257:
        -:  258:                //Arguments to the thread handler
    #####:  259:                arg.sd = connfd;
    #####:  260:                strcpy(arg.username, username);
        -:  261:
        -:  262:                //Creating a server thread for each client
    #####:  263:                ret = pthread_create(&thread, NULL, thread_server, (void*)&arg);
    #####:  264:                if(0 != ret)
        -:  265:                {
    #####:  266:			ERROR_LOGGER(LOG_CRITICAL,"Thread create error");
    #####:  267:                        perror("Thread create error");
    #####:  268:                        return EXIT_FAILURE;
        -:  269:                }
    #####:  270:                pthread_detach(thread);
        -:  271:        }
    #####:  272:        for(i = 0;i < MAX_GROUPS;i++)
        -:  273:        {
    #####:  274:                delete_list(group[i]);
        -:  275:        }
    #####:  276:        close(sock_desc);
    #####:  277:        return EXIT_SUCCESS;
        -:  278:}
        -:  279:
